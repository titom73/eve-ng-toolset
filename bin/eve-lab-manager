#!/usr/bin/python
# coding: utf-8 -*-
#
# Copyright 2021 Arista Networks Thomas Grimonet
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: //www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from __future__ import absolute_import, division, print_function

import argparse
import os
import sys

import requests
from prettytable import PrettyTable
from loguru import logger

from inetsixEve import EveApi


if __name__ == '__main__':

    requests.packages.urllib3.disable_warnings()

    parser = argparse.ArgumentParser(
        description='EVE-NG Remote Access Topology')
    parser.add_argument(
        '--server', '-s', help='EVE-NG server', default='eve-ng.lab.local')
    parser.add_argument(
        '--username', '-u', help='Username to connect to EVE-NG', default='admin')
    parser.add_argument(
        '--password', '-p', help='Password to connect to EVE-NG - can be set with EVE_PASSWORD env')
    parser.add_argument(
        '--lab', '-l', help='LAB name without extension running on EVE-NG', default='password')
    parser.add_argument('--stop', action="store_true",
                        help='Stop a lab', default=False)
    parser.add_argument('--export', action="store_true",
                        help='Export nodes configuration', default=False)
    parser.add_argument('--start', action="store_true",
                        help='Start a lab', default=False)
    parser.add_argument('--wipe', action="store_true",
                        help='Wipe Lab configuration', default=False)
    parser.add_argument('-v', '--verbose', action="store_true",
                        help='Increase verbosity', default=False)
    args = parser.parse_args()

    # Set logging level
    if args.verbose:
        logger.remove()
        logger.add(sys.stderr, level="DEBUG")
    else:
        logger.remove()
        logger.add(sys.stderr, level="INFO")

    # Load data from OS ENVIRONMENT
    args.password = os.getenv('EVE_PASSWORD', args.password)
    args.username = os.getenv('EVE_USERNAME', args.username)
    args.server = os.getenv('EVE_SERVER', args.server)
    args.lab = os.getenv('EVE_LAB', args.lab)

    # Get data from EVE NG server
    eveSrv = EveApi(server=args.server, username=args.username, password=args.password)
    status = None
    action = None
    if args.start:
        action = 'start'
        status = eveSrv.lab_action(project_path=args.lab, action="start")
        print(str(status))
    elif args.stop:
        status = eveSrv.lab_action(project_path=args.lab, action="stop")
        action = 'stop'
    elif args.export:
        status = eveSrv.lab_action(
            project_path=args.lab, action="export", api_type='put')
        action = 'export'
    elif args.wipe:
        status = eveSrv.lab_action(
            project_path=args.lab, action="wipe", api_type='put')
        action = 'wipe'

    table = PrettyTable(['Node Name', 'Action', 'Result'])
    for node_name in status:
        row=[node_name, action, status[node_name]['status']]
        table.add_row(row)
    print(table)
    sys.exit(0)
