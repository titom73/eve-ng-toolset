#!/usr/bin/python
# coding: utf-8 -*-
#
# Copyright 2021 Arista Networks Thomas Grimonet
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: //www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from __future__ import absolute_import, division, print_function

import argparse
import os
import subprocess
import sys

import requests
from prettytable import PrettyTable
from jinja2 import Template
from loguru import logger

from inetsixEve import EveApi

"""
    Python EVE-NG Nodes Connector - CLI tool to list/connect on running nodes on lab on EVE-NG platform
"""


ITERM2_PATH = 'Library/Application Support/iTerm2/DynamicProfiles'
ITERM2_PROFILE ='''
{
  "Profiles": [
    {% for node in nodes %}
    {
      "Name" : "{{ node[0] }}",
      "Tags" : ["{{ lab }}-{{ node[1] }}"],
      "Initial Text" : "telnet {{ eve }} {{ node[2] }}",
      "Guid": "{{ node[3] }}"
    },
    {%- endfor %}
  ]
}
'''


def iterm_profile(lab_json):
    """
    iterm_profile Create an iTerm2 dynamic profile to connect to any nodes running in topology

    Parameters
    ----------
    lab_json : dict
        List of nodes returns by EVE-NG API
    """
    nodelist = []
    for node in nodes['data'].keys():
        # running nodes only
        if lab_json['data'][node]['url'].split(':')[2] != '0':
            name = lab_json['data'][node]['name']               # node name
            # template: xrv, vios, etc
            type = lab_json['data'][node]['template']
            tport = lab_json['data'][node]['url'].split(':')[2]  # dynamic telnet port
            uuid = lab_json['data'][node]['uuid']               # node uuid
            nodelist.append((name, type, tport, uuid))

    template = Template(ITERM2_PROFILE)
    profile_name = args.lab.replace(' ','-')split('/')[-1]
    render = template.render(nodes=sorted(
        nodelist), lab=profile_name, eve=args.server)
    rfile = f'{os.path.expanduser("~")}/{ITERM2_PATH}/{profile_name.replace(' ','-')}.json'
    print('Create iTerm2 dynamic profile at {}'.format(rfile))
    with open(rfile, 'w') as f:
        f.write(render)


def list_topology_nodes(lab_json):
    """
    list_topology_nodes Create a table of all nodes available in EVE-NG lab

    Extract following elements from all nodes and returns a table
    - Name
    - Template
    - Dynamic telnet port

    Parameters
    ----------
    lab_json : dict
        List of nodes returns by EVE-NG API

    Returns
    -------
    string
        A table of all nodes
    """
    nodelist = []
    for node in lab_json['data'].keys():
        if lab_json['data'][node]['url'].split(':')[2] != '0':
            name = lab_json['data'][node]['name']
            template = lab_json['data'][node]['template']
            tport = lab_json['data'][node]['url'].split(':')[2]
            # tport = 'telnet://' + args.server + ':' + \
            lab_json['data'][node]['url'].split(':')[2]
            nodelist.append((args.lab.split('/')[-1], name, template, tport))

    table = PrettyTable(['Topology', 'Node Name', 'Type', 'Telnet Port'])
    for row in nodelist:
        table.add_row(row)
    return table


def connect_node(lab_json, node_search):
    """
    connect_node Start a telnet connection to given node name

    Read EVE-NG data to get telnet port for the given host and
    start a new telnet process

    Parameters
    ----------
    lab_json : dict
        List of nodes returns by EVE-NG API
    node_search : string
        Name of the node to use to open connection

    Returns
    -------
    boolean
        Always True
    """
    for node in lab_json['data'].keys():
        if nodes['data'][node]['url'].split(':')[2] != '0' and nodes['data'][node]['name'] == node_search:
            tport = nodes['data'][node]['url'].split(':')[2]
            process = subprocess.run(['telnet', args.server, tport])
            process
    return True


if __name__ == '__main__':

    requests.packages.urllib3.disable_warnings()

    parser = argparse.ArgumentParser(
        description='EVE-NG Remote Access Topology')
    parser.add_argument(
        '--server', '-s', help='EVE-NG server', default='eve-ng.lab.local')
    parser.add_argument(
        '--username', '-u', help='Username to connect to EVE-NG', default='admin')
    parser.add_argument(
        '--password', '-p', help='Password to connect to EVE-NG - can be set with EVE_PASSWORD env')
    parser.add_argument(
        '--lab', '-l', help='LAB name without extension running on EVE-NG', default='password')
    parser.add_argument(
        '--connect', '-c', help='Connect to node', default='unset')
    parser.add_argument(
        '--iterm', help='Generate iTerm2 profile', action="store_true", default=False)
    parser.add_argument('-v', '--verbose', action="store_true",
                        help='Increase verbosity', default=False)
    args = parser.parse_args()

    # Set logging level
    if args.verbose:
        logger.remove()
        logger.add(sys.stderr, level="DEBUG")
    else:
        logger.remove()
        logger.add(sys.stderr, level="INFO")

    # Load data from OS ENVIRONMENT
    args.password = os.getenv('EVE_PASSWORD', args.password)
    args.username = os.getenv('EVE_USERNAME', args.username)
    args.server = os.getenv('EVE_SERVER', args.server)
    args.lab = os.getenv('EVE_LAB', args.lab)

    # Get data from EVE NG server
    eveSrv = EveApi(server=args.server, username=args.username, password=args.password)
    nodes = eveSrv.get_project_nodes(project_path=args.lab)
    if nodes is None:
        sys.exit(1)
    if args.connect != 'unset':
        connect_node(nodes, args.connect)
    elif args.iterm:
        iterm_profile(lab_json=nodes)
    else:
        table = list_topology_nodes(nodes)
        print(table)
    sys.exit(0)
